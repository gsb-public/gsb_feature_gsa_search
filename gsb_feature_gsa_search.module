<?php
/**
 * @file
 * Code for the GSB Feature GSA Search feature.
 */

include_once 'gsb_feature_gsa_search.features.inc';

define('EXECED_SEARCH', 'exec-ed/search');
define('SEED_SEARCH', 'seed/search');

/**
 * Implements hook_menu().
 */
function gsb_feature_gsa_search_menu() {
  $items = array();
  $settings = _google_appliance_get_settings();

  // search results page
  $parts = substr_count(EXECED_SEARCH, '/');
  $items[EXECED_SEARCH] = array(
    'title' => $settings['search_title'],
    'page callback' => 'google_appliance_search_view',
    'page arguments' => array(++$parts, ++$parts), // (1) search query, (2) results sort param
    'access arguments' => array('access_google_appliance_content'),
    'type' => MENU_SUGGESTED_ITEM,
  );
  $seed_parts = substr_count(SEED_SEARCH, '/');
  $items[SEED_SEARCH] = array(
    'title' => $settings['search_title'],
    'page callback' => 'google_appliance_search_view',
    'page arguments' => array(++$seed_parts, ++$seed_parts), // (1) search query, (2) results sort param
    'access arguments' => array('access_google_appliance_content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  return $items;
}

/**
 * Implements hook_google_appliance_settings_alter().
 * 
 * Changes the collection name for exec-ed search.
 */
function gsb_feature_gsa_search_google_appliance_settings_alter(&$settings) {
  if (strpos($_GET['q'],EXECED_SEARCH) !== false) {
    $settings['collection'] = 'revamp_exec_ed';
  }
  if (strpos($_GET['q'],SEED_SEARCH) !== false) {
    $settings['collection'] = 'revamp_seed';
  }
}

/**
 * Implements hook_url_inbound_alter().
 *
 * Make search/* URL to actually behave as gsearch/*.
 */
function gsb_feature_gsa_search_url_inbound_alter(&$path, $original_path, $path_language) {
  // This will not allow us to use search module, it will redirect to gsearch instead.
  if (arg(0, $path) == 'search') {
    $path = 'gsearch/' . arg(1, $path);
  }
}

/**
 * Implements hook_url_outbound_alter().
 *
 * Make gsearch/* links to go to search/* URL.
 */
function gsb_feature_gsa_search_url_outbound_alter(&$path, &$options, $original_path) {
  if (arg(0, $path) == 'gsearch') {
    $path = str_replace('gsearch', 'search', $path);
  }
}

/**
 * Implements hook_form_alter().
 */
function gsb_feature_gsa_search_form_alter(&$form, &$form_state, $form_id) {
  if (in_array($form_id, array('google_appliance_search_form', 'google_appliance_block_form'))) {
    $form['#action'] = str_replace('gsearch', 'search', $form['#action']);
    $form['#submit'][] = 'gsb_feature_gsa_search_form_submit';
    $form['#attributes']['class'][] = 'grey-search-box';
    $form['search_keys']['#attributes']['placeholder'][] = t('search');
  }
  if ($form_id == 'google_appliance_search_form') {
    $form['basic']['prompt']['#weight'] = 5;
  }
}

/**
 * Submit callback to alter redirect URL.
 */
function gsb_feature_gsa_search_form_submit($form, &$form_state) {
  // set the redirect according to modified path.
  $search_query = urlencode($form_state['values']['search_keys']);
  if (strpos($form['#action'],EXECED_SEARCH) !== false) {
    $form_state['redirect'] = url(EXECED_SEARCH . '/' . $search_query, array('absolute' => TRUE));
  }
  elseif (strpos($form['#action'],SEED_SEARCH) !== false) {
    $form_state['redirect'] = url(SEED_SEARCH . '/' . $search_query, array('absolute' => TRUE));
  }
  else {
    $form_state['redirect'] = url('search/' . $search_query, array('absolute' => TRUE));
  }
}

/**
 * Implements hook_form_alter().
 */
function gsb_feature_gsa_search_form_google_appliance_search_form_alter(&$form, &$form_state) {
  $form['basic']['submit']['#prefix'] = '<div class="form-actions">';
  $form['basic']['submit']['#suffix'] = '</div>';
}
